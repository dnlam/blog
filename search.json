[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My blog posts about Maths, AI/ML",
    "section": "",
    "text": "Collaborative Filtering\n\n\n\nrecommendation\n\ncode\n\n\n\n\n\n\n\n\n\nAug 6, 2022\n\n\n\n\n\n\n\n\n\n\n\n\nNatural Language Processing\n\n\n\nNLP\n\ntransfer learning\n\ncode\n\n\n\n\n\n\n\n\n\nMar 29, 2022\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/natural-language-processing/index.html",
    "href": "posts/natural-language-processing/index.html",
    "title": "Natural Language Processing",
    "section": "",
    "text": "In this notebook, we are going to deep dive into natural language processing (NLP) using Deep Learning (info). Relying on the pretrained language model, we are going to fine-tune it to classify the reviews, and it works as sentiment analysis.\nBased on a language model which has been trained to guess what the next word in the text is, we will apply transfer learning method for this NLP task.\n\n\n\n\n\n\nFigure 1: Transfer learning workflow for movie classifier\n\n\n\nAs shown in Figure 1, we will start with the Wikipedia language model with a subset which we called Wikitext103. Then, we are going to create an IMDb language model which predicts the next word of a movie reviews. This intermediate learning will help us to learn about IMDb-specific kinds of words like the name of actors and directors. Afterward, we end up with our classifier."
  },
  {
    "objectID": "posts/natural-language-processing/index.html#tokenization",
    "href": "posts/natural-language-processing/index.html#tokenization",
    "title": "Natural Language Processing",
    "section": "Tokenization",
    "text": "Tokenization\nBasically, tokenization convert the text into list of words. Firstly, we will grab our IMDb dataset and try out the tokenizer with all the text files.\n\n\nCode\nfrom fastai.text.all import *\npath = untar_data(URLs.IMDB)\n# path.ls()\n\n\n\n\nCode\nfiles = get_text_files(path,folders=['train','test','unsup'])\n\n\nThe default English word tokenizer that FastAI used is called SpaCy which uses a sophisticated riles engine for particular words and URLs. Rather than directly using SpacyTokenizer, we are going to use WordTokenizer which always points to fastai’s current default word tokenizer.\n\n\nCode\ntxt = files[0].open().read()\ntxt[:60]\nspacy = WordTokenizer()\ntoks = first(spacy([txt]))\n\nprint(coll_repr(toks,30))\n\n\n(#365) ['While','the','premise','of','the','film','is','pretty','lame','(','Ollie','is','diagnosed','with','\"','hornophobia','\"',')',',','the','film','is','an','amiable','and','enjoyable','little','flick','.','It'...]\n\n\n\nSub-word tokenization\nIn additions to word tokenizer, sub-word tokenizer is really useful for languages which the spaces are not necessary for separations of components in a sentence (e.g: Chinese). To handle this, we will do 2 steps: - Analyze a corpus of documents to find the most commonly occurring groups of letters which form the vocab - Tokenize the corpus using this vocab of sub-word units\nFor example, we will first look into 2000 movie reviews:\n\n\nCode\ntxts = L(o.open().read() for o in files[:2000])\ndef subword(sz):\n    sp = SubwordTokenizer(vocab_sz=sz)\n    sp.setup(txts)\n    return ' '.join(first(sp([txt]))[:40])\n\n\nThen, the long underscore is when we replace the space and we can know where the sentences actually start and stop.\n\n\nCode\nsubword(10000)\n\n\n\n\n\n\n\n\n\n'▁Whil e ▁the ▁premise ▁of ▁the ▁film ▁is ▁pretty ▁lame ▁( O ll ie ▁is ▁diagnos ed ▁with ▁\" hor no pho b ia \") , ▁the ▁film ▁is ▁an ▁a mi able ▁and ▁enjoyable ▁little ▁flick . ▁It \\''\n\n\nIf we use a larger vocab, then most common English words will end up in the vocab themselves, and we will not need as many to represent a sentence. So, there is a compromise to take into account when choosing sub-word vocab: A larger vocab means more fewer tokens per sentence which means faster training, less memory, less state for the model to remember, but it comes to the downside of larger embedding matrix and requiring more data to learn."
  },
  {
    "objectID": "posts/natural-language-processing/index.html#numericalization",
    "href": "posts/natural-language-processing/index.html#numericalization",
    "title": "Natural Language Processing",
    "section": "Numericalization",
    "text": "Numericalization\nIn order to numericalize the tokens, we need to call setup first to create the vocab.\n\n\nCode\ntkn = Tokenizer(spacy)\ntoks300 = txts[:300].map(tkn)\ntoks300[0]\nnum = Numericalize()\nnum.setup(toks300)\ncoll_repr(num.vocab,20)\n\n\n\"(#2976) ['xxunk','xxpad','xxbos','xxeos','xxfld','xxrep','xxwrep','xxup','xxmaj','the',',','.','and','a','of','to','is','in','it','i'...]\"\n\n\nThe results return our rule tokens first, and it is followed by word appearances, in frequency order. Once we created our Numerical object, we can use it as if it were a function.\n\n\nCode\nnums = num(toks)[:20]\nnums\n\n\nTensorText([   0,    9,  938,   14,    9,   30,   16,  173, 1227,   35,    0,\n              16,    0,   27,   23,    0,   23,   33,   10,    9])\n\n\n\n\nCode\n' '.join(num.vocab[o] for o in nums)\n\n\n'xxunk the premise of the film is pretty lame ( xxunk is xxunk with \" xxunk \" ) , the'\n\n\nNow, we have already had numerical data, we need to put them in batches for our model.\n\nBatches of texts\nRecalling the batch creation for the images when we have to reshape all the images to be same size before grouping them together in a single tensor for the efficient calculation purposes. It is a little bit different when dealing with texts because it is not desirable to resize the text length. Also, we want the model read texts in order so that it can efficiently predict what the next word is. This suggests that each new batch should begin precisely where the previous one left off.\nSo, the text stream will be cut into a certain number of batches (with batch size) with preserving the order of the tokens. Because we want the model to read continuous rows of the text.\nTo recap, at every epoch, we shuffle our collection of documents and concatenate them into a stream of tokens. Then, that stream will be cut into a batch of fixed size consecutive mini stream. The model will read these mini streams in order and it will produce the same activation.\n\n\nCode\nnums300 = toks300.map(num)\ndl = LMDataLoader(nums300)\nx,y = first(dl)\nx.shape, y.shape\n\n\n(torch.Size([64, 72]), torch.Size([64, 72]))\n\n\nThe batch size is 64x72. 64 is the default batch size and 72 is the default sequence length."
  },
  {
    "objectID": "posts/natural-language-processing/index.html#create-a-language-model-using-datablock",
    "href": "posts/natural-language-processing/index.html#create-a-language-model-using-datablock",
    "title": "Natural Language Processing",
    "section": "Create a language model using DataBlock",
    "text": "Create a language model using DataBlock\nBy default, fastai handles tokenization and numericalization automatically when TextBlock is passed to DataBlock.\n\n\nCode\nget_imdb = partial(get_text_files, folders=['train', 'test', 'unsup'])\n\ndls_lm = DataBlock(\nblocks=TextBlock.from_folder(path, is_lm=True),\nget_items=get_imdb, splitter=RandomSplitter(0.1)).dataloaders(path, path=path, bs=128, seq_len=80)"
  },
  {
    "objectID": "posts/natural-language-processing/index.html#fine-tuning-the-language-model",
    "href": "posts/natural-language-processing/index.html#fine-tuning-the-language-model",
    "title": "Natural Language Processing",
    "section": "Fine-tuning the language model",
    "text": "Fine-tuning the language model\nIn this step, we are going to create a learner which is going to learn and predict the next word of a movie review. It will take the data from data loader, pretrained model (AWD_LSTM), apply dropout technique and take accuracy as well as perplexity metrics into account. Particularly, accuracy metric is used to evaluate how the correctness when the model tries to predict the next word, while perplexity metric is used to track the (exponential) value of cross-entropy loss.\n\n\nCode\nlearn = language_model_learner(\ndls_lm, AWD_LSTM, drop_mult=0.3,\nmetrics=[accuracy, Perplexity()]).to_fp16()\n\n\nThen, we will perform intermediate model training by fitting the model in one training cycle.\n\n\nCode\nlearn.fit_one_cycle(1,2e-2)\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\nperplexity\ntime\n\n\n\n\n0\n4.022653\n3.895626\n0.300949\n49.186825\n2:13:57\n\n\n\n\n\nAfter few minutes of training, we got the prediction accuracy which is around 29-30 percent. In order to reuse the pre-trained model, we can easily save the model with PyTorch. In this case, we are going to save only learnable parameters (i.e., weight and bias of a model via state_dict) and the updated parameters after one epoch training will be stored at learn.path/'models'/'one_epoch_training_torch.pth'.\n\n\nCode\n# Option 1: Save with FastAI\n# learn.save('one_epoch_training')\n\n# Option 2: Save with PyTorch\nimport torch\nmodel_save_path = learn.path/'models'/'one_epoch_training_torch.pth'\ntorch.save(learn.model.state_dict(), model_save_path)\n# print(f\"Model saved to: {model_save_path}\")\n\n\nOnce the trainable parameters are stored, we can later load those parameter to the compatible model for further training\n\n\nCode\n# Option 1: Use FastAI's load method\n# learn.load('one_epoch_training', strict=False)\n\n# Option 2: Use PyTorch to load the saved model\nimport torch\nmodel_load_path = learn.path/'models'/'one_epoch_training_torch.pth'\nstate_dict = torch.load(model_load_path, weights_only=False)\nlearn.model.load_state_dict(state_dict, strict=False)\n# print(f\"Model loaded from: {model_load_path}\")\n\n\n&lt;All keys matched successfully&gt;\n\n\nAfter loading the pre-saved model, we can unfreeze it and train it for few more epochs. Then, let’s see the improvement of the accuracy.\n\n\nCode\nlearn.unfreeze()\n\nlearn.fit_one_cycle(10,2e-3)\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\naccuracy\nperplexity\ntime\n\n\n\n\n0\n3.756103\n3.753208\n0.317186\n42.657707\n2:09:41\n\n\n1\n3.701586\n3.692517\n0.324204\n40.145767\n2:10:06\n\n\n2\n3.631865\n3.643081\n0.329702\n38.209377\n2:09:27\n\n\n3\n3.557527\n3.611756\n0.333258\n37.031033\n2:10:08\n\n\n4\n3.496033\n3.588261\n0.336209\n36.171108\n2:09:46\n\n\n5\n3.427615\n3.574450\n0.338256\n35.675011\n2:09:23\n\n\n6\n3.356645\n3.564668\n0.339928\n35.327736\n2:08:22\n\n\n7\n3.309995\n3.562580\n0.340825\n35.254047\n2:08:05\n\n\n8\n3.255192\n3.565229\n0.341031\n35.347553\n2:06:47\n\n\n9\n3.210757\n3.569845\n0.340811\n35.511105\n2:05:18\n\n\n\n\n\nAs we can see from the training process, the accuracy has improved progressively. At the end of ten cycle training, the accuracy has increased to around 35 percent. To perform model finetuning, we save the model parameters except the last activation function layer. To do that, we can save it with save_encoder\n\n\nCode\nlearn.save_encoder('finetuned')\n\n\nIn this step, we have fine tuned the language model. Now, we will fine tune this language model using the IMDb sentiment labels.\nAlthough the model is pre-designed for next word prediction, we can also use this model to generate texts. For example, we can self-create a sentence with some words and we parses this sentence to the model to generate a new sentence which has one word longer than the parsed sentence. Leveraging this capability, we are going to create 40 new words from that randomized content.\n\n\nCode\nTEXT = \"I liked this movie so\"\n\nN_WORDS = 40\n\nN_SENTENCES = 2\n\npreds = [learn.predict(TEXT, N_WORDS, temperature=0.75) for _ in range(N_SENTENCES)]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s see the generation of new inventing words\n\n\nCode\nprint(\"\\n\".join(preds))\n\n\ni liked this movie so much i bought it on ebay and so i bought it . This is not a very good movie but you do have to pay attention to the story , there is so much that is true about the\ni liked this movie so much . The acting was good , the camera work was good , the effects were good . i was also surprised to see a few of the actors who played Mr . Thomas Gomez were"
  },
  {
    "objectID": "posts/natural-language-processing/index.html#fine-tuning-the-classification-model",
    "href": "posts/natural-language-processing/index.html#fine-tuning-the-classification-model",
    "title": "Natural Language Processing",
    "section": "Fine-tuning the classification model",
    "text": "Fine-tuning the classification model\nPreviously, we built a language model to predict the next word of a document given the input text. Now, we are going to move to the classifier which predicts the sentiment of a document.\n\n\nCode\ndls_clas = DataBlock(\n    blocks=(TextBlock.from_folder(path, vocab=dls_lm.vocab),CategoryBlock),\n    get_y = parent_label,\n    get_items=partial(get_text_files, folders=['train', 'test']),\n    splitter=GrandparentSplitter(valid_name='test')\n).dataloaders(path, path=path, bs=128, seq_len=72)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "Welcome to my blog!\nIn this site, you will find my contributions and highlights of my writings on Mathematics and Computer Science.\nIf you are interested in this field, feel free to connect with me and I would love to hear from you! See the article on contributing posts or my contact for additional details."
  },
  {
    "objectID": "posts/collaborative-filtering/index.html",
    "href": "posts/collaborative-filtering/index.html",
    "title": "Collaborative Filtering",
    "section": "",
    "text": "General context\nWhen we think about Netflix, we might have watched lots of movies that are science fiction, action, horror etc. Netflix may not know these particular properties of the films you watched, but it would be able to see that other people that watched the same movies could watch other movies that you are not watching yet. By doing recommendation approach, Netflix can recommend us the contents of the movies that we have not watched before but relevant to what we liked.\nThis approach is called collaborative filtering. The key foundation idea is that of latent factors which decides what kinds of movies you want to watch.\n\n\nData set\nIndeed, we can not have access to Netflix’s entire dataset of movie watching history, but there is a great dataset that we can yous, called MovieLen which contains tens millions of movies ranking.\n\n\nCode\nfrom fastai.collab import *\nfrom fastai.tabular.all import *\n\n# path = untar_data(URLs.ML_100k)"
  }
]