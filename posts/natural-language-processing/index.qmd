---
title: "Natural Language Processing"
# author: "Harlow Malloc"
date: "2022-03-29"
categories: [NLP, transfer learning, code]
image: "NLP.png"
format:
  html:
    code-fold: true
    fig-cap-location: bottom
    tbl-cap-location: top
crossref:
  fig-title: "Figure"
  eq-title: "Equation"
  tbl-title: "Table"
jupyter: python3
---

# Objectives
In this notebook, we are going to deep dive into natural language processing (NLP) using Deep Learning ([info](https://medium.com/dair-ai/deep-learning-for-nlp-an-overview-of-recent-trends-d0d8f40a776d)). Relying on the pretrained language model, we are going to fine-tune it to classify the reviews, and it works as sentiment analysis. 

Based on a `language model` which has been trained to guess what the next word in the text is, we will apply transfer learning method for this NLP task.


![Transfer learning workflow for movie classifier](https://github.com/fastai/fastbook/blob/master/images/att_00027.png?raw=1){#fig-transfer-learning fig-cap="Transfer learning workflow for movie classifier."}

As shown in @fig-transfer-learning, we will start with the Wikipedia language model with a subset which we called Wikitext103. Then, we are going to create an IMDb language model which predicts the next word of a movie reviews. This intermediate learning will help us to learn about IMDb-specific kinds of words like the name of actors and directors. Afterward, we end up with our classifier. 


# Text Preprocessing

In order to build a language model with many complexities such as different sentence lengths in long documents, we can build a neural network model to deal with that issue. We apprehended that categorical variables (words) can be used as independent variables for a neural network (using embedding matrix).  Then, we could do the same thing with text.

First, we concatenate all the documents in our dataset into a big long string and split it into words. Our independent variables will be the sequence of words starting with the first word and ending with the second last, and our dependent variable would be the sequence of words starting with the second word and ending with the last words. 

In our vocab, it might exist the very common words and new words. For new words, because we don't have any pre-knowledge, so we will just initialize the corresponding row with a random vector. 

These above steps can be listed as below:
- Tokenization: convert the text into a list of words
- Numericalization: make a list of all the unique words which appear, and convert each word into a number, by looking up its index in the vocab.
- Language model data loader creation : handle creating dependant variables
- Language model creation: handle input list by using recurrent neural network.

## Tokenization
Basically, tokenization convert the text into list of words. Firstly, we will grab our IMDb dataset and try out the tokenizer with all the text files.

```{python}
#| echo: true
#| output: false
#| eval: true
#| warning: false
#| message: false
from fastai.text.all import *
path = untar_data(URLs.IMDB)
# path.ls()
```

```{python}
#| echo: true
#| output: true
#| eval: true
#| warning: false
#| message: false
files = get_text_files(path,folders=['train','test','unsup'])
```

The default English word tokenizer that FastAI used is called `SpaCy` which uses a sophisticated riles engine for particular words and URLs. Rather than directly using ```SpacyTokenizer```, we are going to use ```WordTokenizer``` which always points to fastai's current default word tokenizer. 
```{python}
#| echo: true
#| output: true
#| eval: true
#| warning: false
#| message: false
txt = files[0].open().read()
txt[:60]
spacy = WordTokenizer()
toks = first(spacy([txt]))

print(coll_repr(toks,30))
```

### Sub-word tokenization
In additions to word tokenizer, sub-word tokenizer is really useful for languages which the spaces are not necessary for separations of components in a sentence (e.g: Chinese). To handle this, we will do 2 steps:
- Analyze a corpus of documents to find the most commonly occurring groups of letters which form the vocab
- Tokenize the corpus using this vocab of sub-word units

For example, we will first look into 2000 movie reviews:
```{python}
#| echo: true
#| output: true
#| eval: true
#| warning: false
#| message: false
txts = L(o.open().read() for o in files[:2000])
def subword(sz):
    sp = SubwordTokenizer(vocab_sz=sz)
    sp.setup(txts)
    return ' '.join(first(sp([txt]))[:40])
```

Then, the long underscore is when we replace the space and we can know where the sentences actually start and stop. 

```{python}
#| echo: true
#| output: true
#| eval: true
#| warning: false
#| message: false
subword(10000)
```

If we use a larger vocab, then most common English words will end up in the vocab themselves, and we will not need as many to represent a sentence. So, there is a compromise to take into account when choosing sub-word vocab: A larger vocab means more fewer tokens per sentence which means faster training, less memory, less state for the model to remember, but it comes to the downside of larger embedding matrix and requiring more data to learn.

## Numericalization
In order to numericalize, we need to call ```setup``` first to create the vocab. 

```{python}
#| echo: true
#| output: true
#| eval: true
#| warning: false
#| message: false
tkn = Tokenizer(spacy)
toks300 = txts[:300].map(tkn)
toks300[0]
num = Numericalize()
num.setup(toks300)
coll_repr(num.vocab,20)
```

The results return our rule tokens first, and it is followed by word appearances, in frequency order.
Once we created our Numerical object, we can use it as if it were a function.

```{python}
nums = num(toks)[:20]
nums
```


```{python}
' '.join(num.vocab[o] for o in nums)
```

Now, we have already had numerical data, we need to put them in batches for our model.

### Batches of texts
Recalling the batch creation for the images when we have to reshape all the images to be same size before grouping them together in a single tensor for the efficient calculation purposes. It is a little bit different when dealing with texts because it is not desirable to resize the text length. Also, we want the model read texts in order so that it can efficiently predict what the next word is. This suggests that each new batch should begin precisely where the previous one left off.

So, the text stream will be cut into a certain number of batches (with batch size) with preserving the order of the tokens. Because we want the model to read continuous rows of the text.

To recap, at every epoch, we shuffle our collection of documents and concatenate them into a stream of tokens. Then, that stream will be cut into a batch of fixed size consecutive mini stream. The model will read these mini streams in order and it will produce the same activation.


```{python}
nums300 = toks300.map(num)
dl = LMDataLoader(nums300)
x,y = first(dl)
x.shape, y.shape
```

The batch size is 64x72. 64 is the default batch size and 72 is the default sequence length.

# Training a Text Classifier
## Create a language model using DataBlock
By default, `fastai` handles tokenization and numericalization automatically when `TextBlock` is passed to `DataBlock`. 

```{python}

get_imdb = partial(get_text_files, folders=['train', 'test', 'unsup'])

dls_lm = DataBlock(
blocks=TextBlock.from_folder(path, is_lm=True),
get_items=get_imdb, splitter=RandomSplitter(0.1)).dataloaders(path, path=path, bs=128, seq_len=80)
```

## Fine-tuning the language model

Then, we are going to create a learner which is going to learn and predict the next word of a movie review. It will take the data from data loader, pretrained model (AWD_LSTM), Dropout technique and metrics into account.

```{python}
learn = language_model_learner(
dls_lm, AWD_LSTM, drop_mult=0.3,
metrics=[accuracy, Perplexity()]).to_fp16()
```

Then we will do training (fit_one_cycle instead of fine_tuning) because we will be saving the intermediate model results during the training process.

```{python}
#| echo: true
#| output: true
#| eval: true
#| warning: false
#| message: false
learn.fit_one_cycle(1,2e-2)
```

After few minutes, we got the accuracy of prediction using transfer learning which is about 29 percent.
In order to intermediately save the pre-trained model, we can easily do it with PyTorch, and it will create a file in `learn.path/models`. Afterward, we can load the content of the file without any difficulty.

```{python}
# Option 1: Save with FastAI
# learn.save('one_epoch_training')

# Option 2: Save with PyTorch
import torch
model_save_path = learn.path/'models'/'one_epoch_training_torch.pth'
torch.save(learn.model.state_dict(), model_save_path)
# print(f"Model saved to: {model_save_path}")
```

```{python}
# Option 1: Use FastAI's load method
# learn.load('one_epoch_training', strict=False)

# Option 2: Use PyTorch to load the saved model
import torch
model_load_path = learn.path/'models'/'one_epoch_training_torch.pth'
state_dict = torch.load(model_load_path, weights_only=False)
learn.model.load_state_dict(state_dict, strict=False)
# print(f"Model loaded from: {model_load_path}")
```
After loading the pre-saved model, we can unfreeze it and train it for few more epochs. Then, let's see the improvement of the accuracy.

```{python}
learn.unfreeze()

learn.fit_one_cycle(10,2e-3)
```

Then, we save our model except the last activation function layer. To do that, we can save it with `save_encoder`

```{python}
learn.save_encoder('finetuned')
```
In this step, we have fine tuned the language model. Now, we will fine tune this language model using the IMDb sentiment labels.

## Text generation

We can self create some random words and we can create sentences and each contains 40 words and we will predict the content of those with a kind of randomization.

```{python}
#| echo: true
#| output: true
#| eval: true  
#| warning: false
#| message: false

TEXT = "I liked this movie so"

N_WORDS = 40

N_SENTENCES = 2

preds = [learn.predict(TEXT, N_WORDS, temperature=0.75) for _ in range(N_SENTENCES)]
```



Let's see the generation of new inventing words
```{python}
print("\n".join(preds))
```

## Creating the classifier DataLoaders


Previously, we built a language model to predict the next word of a document given the pre text. Now, we are going to move to the classifier which predict the sentiment of a document.

```{python}
dls_clas = DataBlock(
    blocks=(TextBlock.from_folder(path, vocab=dls_lm.vocab),CategoryBlock),
    get_y = parent_label,
    get_items=partial(get_text_files, folders=['train', 'test']),
    splitter=GrandparentSplitter(valid_name='test')
).dataloaders(path, path=path, bs=128, seq_len=72)
```

Let's see some example of data set.
```{python}
dls_clas.show_batch(max_n=5)
```